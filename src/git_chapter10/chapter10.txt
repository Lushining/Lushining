面向对象编程(高级)
一、static
1.类成员:
1.1实现：访问修饰符 static ...;
        对象名/类名.类成员名
1.2细节：①无需创建对象，即可通过类名访问；
         *禁止使用与对象有关的关键字：this/super；
        ②所有对象共享类成员，每个对象独有普通成员(必须先创建再访问)；
        ③按权限访问：静态方法只访问静态成员或创建对象访问普通成员，普通方法访问任意成员；
2.main方法的动态传参
  String[] args：保存执行java命令时的参数
  cmd：java 运行的类名 参数1 参数2 参数3
  idea：run-编辑配置-程序实参
3.代码块：
3.1实现：
  ①<修饰符> {代码}；    //修饰符与static可自选
  ②补充构造器：隐含super()父类构造器和{本类代码块}；
3.2细节：
  ①加载类信息前执行：new对象；通过类名访问类成员；
  ②static代码块在加载类信息时只执行一次，
  ③普通代码块在创建对象时执行次数不限；
  ④创建对象时的调用顺序：静态->普通->构造器
    *代码块和属性初始化平级，按照定义顺序
  ⑤创建子类的调用顺序：静态(父->子)->父类(普通->构造器)->子类(普通->构造器)
  ⑥按权限访问静态代码块只能直接调用静态成员，普通代码块可调用所有
4.单例设计模式：一个类只存在一个对象与取得对象的方法；
4.1实现：饿汉式vs懒汉式
  ①构造器私有化
  ②静态的私有对象：定义vs声明
  ③静态的公共方法：返回对象vs过滤(null->新建/直接返回)
4.2细节：
  ①类加载时创建对象vs使用方法时创建(只创建一次)
  ②可能造成资源浪费vs线程安全问题

二、final
1.使用场景
  ①不希望类被继承：final class AA{}
  ②不希望父类方法被重写：public final a(){}
  ③不希望属性值或局部变量被修改：
2.使用细节
  ①final属性必须初始化：
    命名：XX_XX_XX    //赋值为常量
    普通属性赋值：类定义、构造器、代码块
    静态属性赋值：类定义、静态代码块
    *拒绝构造器赋值：加载类信息时即初始化静态属性，不一定调用构造器
  ②final类：不能继承，但可实例化
  ③final方法：final方法不能重写但可继承
  ④不能修饰构造器
  ⑤final static：通过类名访问属性时，不导致类加载
  ⑥包装类与String都是final类；
三、abstract
1.实现：父类方法不确定，子类重写具体方法
       ->同时abstract父类与方法并省略方法体
2.细节：
  ①只能修饰类和方法
  ②抽象类可以有任意成员，但不能实例化
  ③抽象方法只存在于抽象类，且无方法体
  ④继承抽象类：实现所有抽象方法或声明为抽象类
  ⑤禁止使用private、final、static
3.模板设计模式：多个方法有相同部分
  ①设计抽象父类：抽象方法->公有方法调用抽象方法
  ②设计普通子类：继承抽象父类->重写抽象方法
四、Interface
1.基本介绍
1.1内涵：接口封装抽象方法：实现一个功能(连接设备)
        类重写抽象方法：实现具体功能(手机 相机)
1.2实现：interface 接口名{方法(抽象/静态/默认)}
        *抽象方法：省略abstract关键字，没有方法体
        *静态方法：<修饰符> static，有方法体
        *默认方法：default <修饰符>，有方法体
        class 类名 implement 接口名{重写抽象方法}
        *默认继承所有接口成员
2.细节：
  ①接口：只能公有或默认，且不能实例化
  ②方法：<public>方法,
  ③属性：<public s f>属性必须初始化，通过接口名直接访问
  ④类传递：单继承类；多连接接口但要重写所有抽象方法或声明为抽象类；
  ⑤接口传递：不继承类，允许传递多个接口
  ⑥同名成员：接口名/super.属性名
3.接口的多态特性(同继承的多态)
3.1多态对象：原理3 向上转型2 向下转型2 动态绑定机制(方法/属性)
3.2多态参数：定义形参为接口，实参为类；
           更换实参重写方法；向下转型实现特殊方法
3.3多态数组：定义接口类型数组，创建类的对象；
           遍历数组更换对象实现方法重写；向下转型实现类的特殊方法；
五、内部类
1.局部内部类--局部位置(方法体/代码块)有类名
  ①修饰：禁止访问修饰符(局部变量禁止修饰)
  ②访问：局部内部类--创建方法,直接访问外部类所有成员(包括私有)
         外部类--创建方法，新建对象再访问
         外部其他类--通过外部类公共方法访问
  ③重名：就近访问或(外部类.this.成员)指定访问
    *外部类.this==外部其他类创建的外部类对象
2.匿名内部类--局部位置无类名
  ①②③
  ④定义：<类 a => new 类/接口(参数){类体}<.方法()>;
    *创建类与对象且分配类名：class Xxx extends OtherOuter{类体}；new Xxx();
    *类型：有类体vs无类体
    *创建：匿名内部类只能使用一次(创建一个对象)
    *引用类：抽象类必须重写所有抽象方法，普通类自由选择；
    *构造器：参数传给super构造器，类体禁止新建构造器
  ⑤应用：作为实参，直接传递一个对象并重写方法  --多态参数(向上转型)
3.成员/静态内部类--成员位置无/有static
  ①修饰：允许任意访问修饰符(成员允许修饰)
  ②访问：成员内部类--创建方法,直接访问外部类所有成员/静态成员，
         外部类--创建方法,新建对象再访问；
         外部其他类--a.成员：通过外部类对象创建内部类实例：O.I i = o.new I();
                     静态：通过外部类名创建内部类实例：new O.I()
                   b.通过外部类公共方法返回内部类对象：return new I();
                     --普通方法：创建对象再访问o.get();
                     --静态方法：直接访问O.get();
  ③重名：就近访问或(外部类.成员)指定访问


tips:
1.打印对象的显示：
  ①有toString方法：具体内容
  ②无toString方法：全类名@十六进制哈希码
2.完善类的定义：
  package 包名
  class 外部类 extends 父类/implement 接口{
  成员(普通/静态)--3细节
  构造器--3细节
  代码块(普通/静态)--6细节
  class 内部类
  }
  class 外部其他类