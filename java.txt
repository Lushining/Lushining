*快速学习基本原理和语法(忽略细节)-快速入门：完成一个基本程序-研究细节进行优化

建立编程思想：
一、java概述
1.特性
1.1解释性语言(java)：编译后的代码不能直接被机器执行，需要解释器(JVM)执行；
   编译性语言(c/c++)：编译后的代码(二进制)可以直接被机器执行
1.2跨平台性：同一个java程序(.class)可以通过JVM在多个系统(windows/Linux)运行
   
2.程序安装与运行机制
2.1相关程序：目录名不含中文与空格
   JDK(java开发工具包)=JRE+开发工具(java,javac,javadoc,javap)
   JRE(java运行环境)=JVM+java核心类库  #若要运行已开发的java程序，只需安装JRE
   JVM(java虚拟机)：屏蔽底层运行平台差异，实现“一次编译，到处运行”
   path：提供cdm中java指令的可执行程序的路径
   classpath：通知JVM用户类的存放路径。
2.2配置环境变量：cmd执行的程序要在当前目录下存在
   添加环境变量：此电脑-属性-高级系统设置-环境变量-增加JAVA HOME环境变量并指向jdk安装目录
   编辑环境变量，增加 %JAVA_HOME%bin （必须保存）
2.3运行机制
2.3.1原理：源文件(.java)--cmd--编译(javac.exe)--字节码文件(.class)--运行(java.exe)--JVM(for windows/Linux/Mac)--输出
2.3.2步骤:
  ①需求说明：开发一个java程序，以输出"..."
  ②编写源文件
  ③编译：在源文件目录下通过编译工具将源文件编译成JVM可识别的字节码文件
         若成功，则无提示且当前目录下出现一个.class文件(可执行的java程序)
     Q:编译.java显示编码GBK不可映射(中文)字符：
     A:切换文件编码格式为ANSI（简体中文编码GB2312）
  ④运行:通过运行工具执行字节码文件
     *java <name>不带后缀：运行的是编码中的hello主类
     *修改后的源文件需要重新编译再执行
2.4注意事项×4：
   源文件由类(class)组成，每一个类代表一个主方法即程序的入口，编译后每个类对应一个字节码文件
   一个源文件最多有一个public类,若存在则文件名必须为该类的类名，其他类的个数不限
   main()方法是执行入口，可指定执行字节码文件，格式固定：public static void main(String[] args){...};
   严格区分大小写，每个语句必须由";"结束,{}成对出现

3.基本知识：
3.1转义字符(ChangeChar.java)
  \t  \n  \\  \\\\  \"  \'  \r
  *一个中文字符=两个英文字符
3.2注释：注释的内容不被JVM解释执行
   单行注释：//
   多行注释：/*  */  #不允许嵌套
   文档注释(Comment.java)：
   ①作用：注释内容可以被javadoc工具解析，生成以网页文件体现的文档
   ②格式：/**
           * author Lushining   #javadoc标签(固定list)
           * version 1.0
         */
   ③实现：javadoc -d <文件夹名> -xx -yy(tags) <.java>

3.3代码规范与常见错误
3.3.1代码规范×6：
   类和方法的注释，用文档注释javadoc编写
   ●tab整体向右缩进，●shift+tab整体向左缩进
   运算符前后默认加空格
   源文件使用UTF-8编码(用GBK保存是为了cmd执行)
   行宽不超过80
   {}次行风格与行尾风格
3.3.2常见错误：尝试理解报错语言
Q:找不到文件
A:文件名错误/文件不在当前目录下
Q:类<CC>是公共的，应在名为<CC.class>的文件中声明 
A:文件名应与主类一致
Q:需要';'(给出定位)
A:';'表示一个语句的结束必须存在
Q:非法字符
A:英文字符&中文字符(;/；)/gbk&UTF-8
Q:找不到符号
A:命令中的单词或方法拼写错误
Q:解析时文件已到达结尾
A:{}缺失
Q:不报错但无法运行
A:业务逻辑错误/环境错误(更换服务器无法运行-操作系统不同/权限不够)
3.3快捷方法：Ctrl+S保存；Tab自动补全;Windows+R打开cmd；ctrl+/注释；
*快捷键冲突须修改：首选项-键盘快捷方式

3.4了解dos命令(Linux详细学习)
3.4.1原理：cmd-><指令>->Dos系统(接收-解析-执行)->Windows文件系统(当前目录)执行
3.4.2相对路径与绝对路径
   D盘--abc/abc2文件夹--test1.1&test1.2/test2.1&test2.2文件夹
#在abc下定位test2.1：
   相对路径：在当前目录下定位路径         
            ..\abc2\test2.1    
   绝对路径：从顶级目录(D盘)开始定位路径 
            D:\abc2\test2.1
3.4.3基本指令
   help <dos>  ：查看指令的使用方法
   dir <file>  :查看当前/指定目录内容      
   cd</D> <C> ：切换到其他盘      
   cd <file>：切换到当前盘其他目录  #绝对路径/相对路径
   cd <../\>：返回上一级目录/直接跳转到根目录
   tree     ：查看指定目录下所有子目录(树状图)
   cls      ：清屏
   exit     ：退出dos
   md/rd    ：创建/删除目录        #md <> <>可同时操作多个
   copy     ：拷贝文件             #copy ok.txt <绝对路径>，可在绝对路径进行改名
   del      ：删除文件             #del hello.txt
   echo     ：创建文件并输入内容    #echo hi > hello.txt
   type     ：创建空文件           #type nul > blanket.txt
   move     ：剪切文件             #move ok.txt <绝对路径>

二、变量
1.变量
1.1意义：是程序的基本组成单位，通过变量名访问变量值(输出信息的快捷键)；
1.2定义：类型+名称+取值  #int a = 1
1.3注意事项×5
   一个变量表示内存中的一个储存区域
   不同的变量可以有不同的类型和占用空间(字节)
   变量必须先定义(声明+赋值)再使用
   同一作用域的变量值可以在同一类型范围内变化(更新变量值)
   变量在同一个作用域不能重名  #作用域=类
2.“+”
2.1数值+数值：加法运算  #System.out.println(1+1)//2
2.2字符串+？：拼接运算  #System.out.println("1"+1)//11
2.3？+？+？ ：从左到右  #System.out.println(“hi”+1+2/1+2+"hi")//hi12/3hi

3.数据类型*
3.1基本数据类型
3.1.1数值型
  整数类型：byte[1],short[2],int[4],long[8]  
    ①默认常量为int，后加l表long，后加d表double   
    ②常量赋值先判断范围;变量赋值考虑精度  #byte/short a = 1 √
    ②1byte(基本储存单位)=8bi(最小~)                   
  浮点类型：float[4],double[8]
    ①浮点数=符号位+指数位+尾数位         #尾数丢失造成精度损失(小数总是近似值)
    ②默认常量为double，float须后加'F'    #float a = 1.1F 
    ③十进制计数：0.512=.512；512.0
     科学计数法：5.12e2=5.12*10^2；5.12E-2=5.12/10^2
    ④浮点型计算得近似值：double a=8.1/3  //2.6999...97     
     计算结果的相等判断：if(a=b)/(Math.abs(a-b)<0.0001);
  字符型：char[2](存放单个字符）
    ①' '表示字符型
    ②1字符=1中文=2英文，可定义转义字符(\t)
    ③本质是一个整数，可进行运算，输出unicode码对应的字符
     http://tool.chinaz.com/Tools/Unicode.aspx
     char c3= 97         System.out.println(c3)       //a
     char c2='a'         System.out.println((int)c2)  //97
     char c4='a'+1       System.out.println(c4)       //b
    ④Char的存取：显示<-'a'-十进制-二进制->储存
  布尔型：boolean[1](true/false)
3.2引用数据类型->后续
   类class：字符串"String"
   接口interface
   数组[]

4.编码
  ASCII[1]       ：一共有128个字符(第一位统一为0)，不能表示中文
  Unicode[2]     ：拓展ASCII(0-127的字符相同)，可表示所有语言
  utf-8[1,6]     ：改进unicode(可变大小)   #表示的中文[3]更多，转GBK可能报错
  gb2312<gbk[1/2]：可表示汉字              #big5繁体中文

5.基本数据类型转换
5.1自动类型转换规则
   ①精度小自动转为精度大，超过精度则报错(特例：数值型的常量赋值)
    转换：char-int-long-float-double/byte-short-int-long-float-double
    示例：int a='c'  //97 ; double b=80//80.0 ；byte a=1000
   ②(byte/short)与char之间不能自动转换，boolean不参与转换
   ③byte,short,char可以转为int计算
    示例：byte a1=1  short a2=1  short/int a3=a1+a2  #int->short报错/int成功 
         byte a4=1  byte a5=a1+a4  #int->byte   
   ④混合运算：转换成精度最大的再计算，结果自动提升为操作数中精度最大的类型 
    float d1=10+1.1  #错误(double->float)
    float d1=10+1.1F #正确
    byte a1=1;short a2=2;int a3=3;double a4=4.0
          float a5=a1+a2+a3+a4   #double->float报错
   ⑤非整数运算：D/D才能得到精确的小数
5.2强制类型转换规则
   ①加强制符()容量大->容量小，可能造成精度损失或数据溢出 
    int a = (int)1.9//1                  #精度损失
    int a1=1000 ; byte a2=(byte)n2//-48  #数据溢出
   ②只针对最近的操作数有效，可用小括号提升优先级
    int a=(int)10*3.5+6*1.5//double->int
    int a=(int)(10*3.5+6*1.5)//(int)44.0->44
   ③char可以自动保存int常量值，保存int变量值需要强制转换
    char a1=100//√ ; int a2=100//√ ; char a3=a2//× ；
    char a4=(char)a2//√ ；System.out.println(a4)//char(100)->d
5.3基本数据类型与String：必须保证格式正确(String"hi"->int异常)
   ①->:基本类型的值+""
    int a=100 ; String str1=a+""
   ②<-:调用包装类的parseXX方法
    int num1 = Integer.parseInt(a);
   ③String->char:String.chartAt(0)
    String a="123" ; char b=a.charAt(0)  #取出第一个字符

三、运算符：
*优先级：括号-单目-算数-位移-关系(后==/!=)-逻辑(&-^-|-短路)-三元-赋值
 运算顺序：单目(++/--/！/~)/赋值从右向左
1.算数运算符：混合运算取大精度
  /除号(截位)   ：2/5=0;2/5.0=0.4；
  %取余(a-a/b*b)：-10%3=(-10)-(-3*3);10/-3=10-(-3)*(-3);-10/-3=-1
   *a为double：强转{#a-(int)a/b*b}+输出近似值    #-10/5/3=-1.5
  ++自增：作为独立语句：int i=10,i++=i++=i+1;
         表达式(前/后)：int a=8,b=++a/a++//a=9,b=9/8;
                     * int i=1,i=i++//1  #temp=i=1,i=i+1,i=temp
                       int i=1,i=++i//2  #i=i+1,temp=i=2,i=temp
2.位移运算符
2.1进制：不区分大小写
2.1.1整数进制：二(以01/0B开头) 十 八(以0开头) 十六(0-9 A-F，以0x/0X开头)
2.1.2进制转换：
  转十：最低位开始取数乘以X的(位数-1)次方
  十转：不断除以X再倒取余
  二转：三位/四位一组转一位 
  转二：一位转三位/四位
2.2二进制的原码、反码、补码×6
  最高位是符号位，0正1负
  正数和0三码合一
  负数反码=原码符号位不变，其他位取反
  负数补码=反码+1
  java的数都是有符号的
  计算机使用补码运算，原码展示运算结果
2.3位运算(二进制)：得补码-按位运算-转原码-十进制输出
2.3.1按位逻辑运算：
  &按位与：均1得1
  |按位或：有1得1
  ^按位异或：不同得1
  ~按位取反
2.3.2按位位移
  <<算数左移   ：符号位不变，低位补零；            #1<<2:00000010->00001000=1*2*2=4
  >>算数右移   ：符号位不变，低位溢出，高位补符号位；#1>>2:00000010->00000000=1/2/2=0
  >>>无符号右移：符号位变，低位溢出，高位补零       #3>>>2:00000011->00000000=
3.关系运算符：输出boolean(true/false)
  ==相等于(=赋值)    =！不等于
  instanceof：是否是类的对象//"hsp" instanceof String
  *S字符串相等比较：String1.equals(String2);具体在前变量在后
4.逻辑运算符：连接多个条件，输出boolean(true->执行)
  短路与&&：条件一false直接输出，不执行后续语句
  逻辑与& ：不论条件一，执行所有语句
  |/||或(区别同上，短路效率高)
  ！取反：!a(T->F,F->T)
  ^ 异或：a^b(==->F,!=->T)
5.三元运算符可嵌套：
  条件表达式？表达式1：表达式2  #T->1,F->2
  *表达式1/2要为可以接受赋值变量的类型(自动/强制)
   int a=1;int b=2;int c = a>b?(int)1.1:(int)2.2;
                   double d = a>b?1.1:2.2/a:b+3;
6.赋值运算符：左边为变量，右边可以是变量、常量、表达式
  基本/复合：a+=b == a=a+b；
  复合赋值运算符进行强制类型转换：
    byte b=3;b+=2  == b=(byte)(b+2) ；b++ == b=(byte)(b+1)
    byte b=3;b=b+2 #int->byte 报错

7.标识符命名规则和规范
7.1规则×3
  组成：a-z A-Z 0-9 _ $，数字不开头，不含空格
  严格区分大小写，长度不限
  不直接使用关键字或保留字（可包含）
7.2规范×4
  包名多单词均小写：com.hsp.crm
  类和接口名多单词首字母大写：TankShotGame
  变量与方法名多单词第二首开始大写：tankShotGame
  常量名均大写，_连接多单词：TAX_RATE
  
8.键盘输入语句：接收用户的输入数据
  import在主类前导入包与类：import java.util.Scanner;
  创建类的对象：Scanner myScanner = new Scanner(System.in);
  调用功能：System.out.println ("请输入名字")
           String name = myScanner.next();
           int age = myScanner.nextInt();
           char gender = myScanner.next().charAt(0);

四、程序控制结构
1.顺序控制:从上到下 
2.分支控制:
2.1单分支：if(条件){}  //true执行,false跳过
2.2双分支：
   if(){代码块1;}
   else{代码块2;}    //true1，false2
2.3多分支:最多有一个程序入口
   if(条件1){代码块1;}
   else if(条件2){代码块2;}
   ......
   else{代码块n}    //自定义：若上述条件均不成立则else，否则无执行
2.4switch分支
  switch(表达式){   //表达式与case数据类型一致或可自动转化
                   //限定数据类型：byte,short,int,char,enum枚举,String
      case 常量1：  //<常量/常量表达式('a'+1)>，不能是变量
          语句块1； //case不同常量值相同输出可合并
          break；  //有则退出switch，无则直接执行2
  ......
      default:     //可自定义，均不匹配则执行
          语句块；
  }

3.循环控制
3.1for循环
   for(变量初始化;循环条件;变量迭代){}
*使用细节：
①循环条件返回boolean值；（true）表示无限循环
②形式2：初始化 /t for(;循环条件;) /t 循环操作 /t 迭代
 i是否只能在for循环使用
 停止循环时i的值
  (;)无限循环
③初始值和迭代可以是多条语句,要求类型一样并且用逗号隔开
3.2while循环：先判断再执行
   变量初始化；
   while(循环条件){  
      循环语句块；
      变量迭代；
   }  
3.3do..while循环：先执行再判断(至少执行一次)
   循环变量初始化；
   do{
      循环语句块；
      循环变量迭代；
   }while(循环条件)；
3.4多重循环：定义变量-内循环-外循环-优化
   *打印金字塔(矩形-半个-整个-空心)

4.跳转控制语句：
4.1break跳出控制：终止switch/循环
  if(){......  //t->执行break，跳出循环
       break;  //f->不执行break，继续循环
       ......
      }  //默认退出最近的循环；定义标签-<label:>指定退出的具体循环
4.2continue：结束本次循环，继续执行下一次循环
4.3return：跳出所在的方法(写在main方法下则跳出所在的程序）

五、数组、排序、查找
1.数组：
1.1基本格式：
   声明再创建：<int>[] <a>;
              a = new <int>[length];
   创建再写入：<int> <a>[] = new int[L];
              <a>[i] = <num>/myScanner.next();
   创建并写入：<int>[] <a> = {....};
1.2遍历元素：<变量名>[i]  #i∈[0,i-1]
   *优化：for( ;< <name>.length; )
1.3JVM内存形式：栈(变量->值;数组->地址)--堆(变量->值/地址)-方法区(常量池)
   基本数据类型传递具体值,互不影响；引用数据类型(数组)传递地址，相互影响；
1.4数组反转：反转规律(temp+arr[]=arr[])/逆序遍历(arr1=arr2)
1.5数组增减：创建新数组[arr.len±1]-循环赋值
1.6使用细节：
   ①存放任何类型，但不能混用或可自动类型转换(int->double)
   ②不赋值则默认：0/0.0,char(\u0000)boolean(false),String(null)
2.排序与查找
  冒泡排序：1.内循环j：依次比较相邻元素，若逆序则交换(反转规律)；
          2.外循环i：内循环次数(len-1-i)
  顺序/二分(针对有序数组)查找：使用标识符判断查找是否成功(int index = ±1)
4.二维数组：
4.1定义：<int>[][] arr= {{},{},...}  /int[] arr[]/int arr[][]
   *列数不定:int[][] arr = new int[3][],循环创建一维空间并赋值
4.2遍历：arr[i]     获取第i+1个元素(第i个数组)
        arr[i][j]  获取第i+1个元素的第j+1个元素
4.3JVM内存形式：栈(二维->地址)->堆(一维->地址->具体值)

六、面向对象编程(基础)
1.类与对象：
   类->自定义数据类型
   对象->一个具体实例，包括属性和行为
1.2成员变量(属性)：可为任意数据类型，默认值同数组
   自定义类：Class <n>{}
   自定义属性：(访问修饰符) <type> <t_n>  //public,protected,默认,private
   创建对象：<n> <c_n> = new <c_n>())  //c_n对象名，开辟的空间:真正的对象
   访问属性：<c_n>.<t_n> =             //可在定义时直接赋值
1.3成员方法(行为)
   创建类与方法：
   public void <>(){    //public方法公开；void没有返回值；
   }                    //形参列表:任意个数和类型；实参必须个数顺序一致，类型兼容
   public <type> <>(){  //<type>：限制输出数据类型，进行自动类型转换；
       return <值/变量>; //return：一个方法最多一个，可定义数组返回多个值；
   }                    //方法不能嵌套定义
   创建对象：<c_n> <> = new <c_n>();//同类的方法直接用，跨类需创建对象
   调用方法1：<c_n>.<m_n>();                //直接输出
   调用方法2：<type> <c_n> = <c_n>.<m_n>()；//得返回值
1.4JVM运行机制
   ①创建对象：方法区加载类信息->堆开辟对象空间(地址)
             ->属性初始化(默认->指定->构造器)->栈赋予对象名地址
     栈(类名->对象地址)->堆(对象地址:属性地址/值)->方法区:常量池(属性地址->属性值)
     *地址置空(<c_n> = null)与异常：引用/具体
   ②成员方法(Ct06)：关注各自栈空间，程序结束则销毁

2.递归(循环使用成员方法)
2.1JVM内存形式：
   ①递归产生独立方法栈：局部变量(基本数据类型)独立，引用类型则共享地址
   ②递归执行完整代码：方法执行完毕或遇return则返回；
2.2经典案例(定义+策略)：
   ①走迷宫：0-路，1-障碍，2-通路，3-死路；循环方法：下右上左判断
   ②汉诺塔：a-起，c-终，b-中；a小(n-1)->b，a大->c，b所有(n-1&b->起)->c；
   ③八皇后
3.方法重载：同类中，允许创建多个同名但形参列表不同(类型/个数/顺序)的方法
  可变参数：同类中，允许将多个同名同功能但参数个数不同的方法封装
          ①<type>... n：接收任意个数参数；n==数组：实参可为数组
          ②一个形参列表最多有一个可变参数，且必须放在末尾
  全局变量(属性)与局部变量(成员方法变量)：
  ①作用域：本类A直接用，其他类B通过创建对象new A()/传参(A a)调用；b本方法内；
  ②默认值：有默认值可直接使用；必须赋值使用；
  ③生与消：随对象存在或消失；随代码存在或消失；
  ④修饰符：允许添加；禁止
  ⑤变量名：属性与局部变量重名则就近访问；同一个作用域内局部变量不能重名；
4.构造器与this：Constructor
4.1构造方法
  创建：(修饰符) <类名>(){}  //默认无参,自定义后覆盖更新；允许重载；
  调用：<c_n> <> = new <c_n>(); //创建对象时自动调用；
4.2JVM运行机制
4.3this(当前对象)：
   ①只能在类定义的方法中使用，且适用于属性、方法、构造器
   ②区分属性与局部变量：this.变量名 == 属性
   ③调用成员方法：this.方法名(参数列表);
   ④构造器中调用构造器：this(参数列表);  //必须是代码块的第一条语句


   JVM内存形式：堆：对象空间：this空间(this地址=对象地址,指向对象自身)





补充资料：快捷键 文档注释标签目录 API文档 标识符命名规范 unicode编码表
1.API文档：应用程序编程接口，用于说明类及其使用方法
1.1JDK8中文版：https://www.matools.com/api/java8、
1.2类的组织形式：JDK-->包(...)-->n接口/类(...)/异常/枚举-->字段/方法
1.3使用示例：寻找相应的包--类--方法；显示-索引-类(第一条)

2.IDEA-Debug
2.1基本概念
   运行：以Debug(调试)模式启动服务，访问到断点自动激活窗口
   断点：左击行号栏添加，可另行设置条件
   按钮：调试与服务
   方法调用栈、变量区(查看断点前当前方法内的变量)
2.2基本用法
   显示执行点：跳转到当前代码执行的行
   步过：如果这一行上有方法则不会进入
   步入：进入当前行方法内部，一般用于进入自定义方法
   强制步入：进入任何方法，查看底层源代码时可进入官方类库
   步出：从步入的方法内退出到方法调用处
   运行到光标处：
   回退断点



tips：
1.String的相等比较：String.equals(string)
2.非整数的运算：D/D->精确小数
3.javap反编译：.class->.java

