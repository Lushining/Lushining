*快速学习基本原理和语法(忽略细节)-快速入门：完成一个基本程序-研究细节进行优化

建立编程思想：
一、java概述
1.特性
1.1解释性语言(java)：编译后的代码不能直接被机器执行，需要解释器(JVM)执行；
   编译性语言(c/c++)：编译后的代码(二进制)可以直接被机器执行
1.2跨平台性：同一个java程序(.class)可以通过JVM在多个系统(windows/Linux)运行
   
2.程序安装与运行机制
2.1相关程序：目录名不含中文与空格
   JDK(java开发工具包)=JRE+开发工具(java,javac,javadoc,javap)
   JRE(java运行环境)=JVM+java核心类库  #若要运行已开发的java程序，只需安装JRE
   JVM(java虚拟机)：屏蔽底层运行平台差异，实现“一次编译，到处运行”
   path：提供cdm中java指令的可执行程序的路径
   classpath：通知JVM用户类的存放路径。
2.2配置环境变量：cmd执行的程序要在当前目录下存在
   添加环境变量：此电脑-属性-高级系统设置-环境变量-增加JAVA HOME环境变量并指向jdk安装目录
   编辑环境变量，增加 %JAVA_HOME%bin （必须保存）
2.3运行机制
2.3.1原理：源文件(.java)--cmd--编译(javac.exe)--字节码文件(.class)--运行(java.exe)--JVM(for windows/Linux/Mac)--输出
2.3.2步骤:
  ①需求说明：开发一个java程序，以输出"..."
  ②编写源文件
  ③编译：在源文件目录下通过编译工具将源文件编译成JVM可识别的字节码文件
         若成功，则无提示且当前目录下出现一个.class文件(可执行的java程序)
     Q:编译.java显示编码GBK不可映射(中文)字符：
     A:切换文件编码格式为ANSI（简体中文编码GB2312）
  ④运行:通过运行工具执行字节码文件
     *java <name>不带后缀：运行的是编码中的hello主类
     *修改后的源文件需要重新编译再执行
2.4注意事项×4：
   源文件由类(class)组成，每一个类代表一个主方法即程序的入口，编译后每个类对应一个字节码文件
   一个源文件最多有一个public类,若存在则文件名必须为该类的类名，其他类的个数不限
   main()方法是执行入口，可指定执行字节码文件，格式固定：public static void main(String[] args){...};
   严格区分大小写，每个语句必须由";"结束,{}成对出现

二、基本知识：
1.转义字符(ChangeChar.java)
  \t  \n  \\  \\\\  \"  \'  \r
  *一个中文字符=两个英文字符
2.注释：注释的内容不被JVM解释执行
2.1单行注释：//
2.2多行注释：/*  */  #不允许嵌套
2.3文档注释(Comment.java)：
   ①作用：注释内容可以被javadoc工具解析，生成以网页文件体现的文档
   ②格式：/**
           * author Lushining   #javadoc标签(固定list)
           * version 1.0
         */
   ③实现：javadoc -d <文件夹名> -xx -yy(tags) <.java>

3.代码规范与常见错误
3.1代码规范×6：
   类和方法的注释，用文档注释javadoc编写
   ●tab整体向右缩进，●shift+tab整体向左缩进
   运算符前后默认加空格
   源文件使用UTF-8编码(用GBK保存是为了cmd执行)
   行宽不超过80
   {}次行风格与行尾风格
3.2常见错误：尝试理解报错语言
Q:找不到文件
A:文件名错误/文件不在当前目录下
Q:类<CC>是公共的，应在名为<CC.class>的文件中声明 
A:文件名应与主类一致
Q:需要';'(给出定位)
A:';'表示一个语句的结束必须存在
Q:非法字符
A:英文字符&中文字符(;/；)/gbk&UTF-8
Q:找不到符号
A:命令中的单词或方法拼写错误
Q:解析时文件已到达结尾
A:{}缺失
Q:不报错但无法运行
A:业务逻辑错误/环境错误(更换服务器无法运行-操作系统不同/权限不够)
3.3快捷方法：Ctrl+S保存；Tab自动补全;Windows+R打开cmd；ctrl+/注释；
*快捷键冲突须修改：首选项-键盘快捷方式

4.了解dos命令(Linux详细学习)
4.1原理：cmd-><指令>->Dos系统(接收-解析-执行)->Windows文件系统(当前目录)执行
4.2相对路径与绝对路径
   D盘--abc/abc2文件夹--test1.1&test1.2/test2.1&test2.2文件夹
#在abc下定位test2.1：
   相对路径：在当前目录下定位路径         
            ..\abc2\test2.1    
   绝对路径：从顶级目录(D盘)开始定位路径 
            D:\abc2\test2.1
4.3基本指令
   help <dos>  ：查看指令的使用方法
   dir <file>  :查看当前/指定目录内容      
   cd</D> <C> ：切换到其他盘      
   cd <file>：切换到当前盘其他目录  #绝对路径/相对路径
   cd <../\>：返回上一级目录/直接跳转到根目录
   tree     ：查看指定目录下所有子目录(树状图)
   cls      ：清屏
   exit     ：退出dos
   md/rd    ：创建/删除目录        #md <> <>可同时操作多个
   copy     ：拷贝文件             #copy ok.txt <绝对路径>，可在绝对路径进行改名
   del      ：删除文件             #del hello.txt
   echo     ：创建文件并输入内容    #echo hi > hello.txt
   type     ：创建空文件           #type nul > blanket.txt
   move     ：剪切文件             #move ok.txt <绝对路径>

三、变量
1.变量
1.1意义：是程序的基本组成单位，通过变量名访问变量值(输出信息的快捷键)；
1.2定义：类型+名称+取值  #int a = 1
1.3注意事项×5
   一个变量表示内存中的一个储存区域
   不同的变量可以有不同的类型和占用空间(字节)
   变量必须先定义(声明+赋值)再使用
   同一作用域的变量值可以在同一类型范围内变化(更新变量值)
   变量在同一个作用域不能重名  #作用域=类
2.“+”
2.1数值+数值：加法运算  #System.out.println(1+1)//2
2.2字符串+？：拼接运算  #System.out.println("1"+1)//11
2.3？+？+？ ：从左到右  #System.out.println(“hi”+1+2/1+2+"hi")//hi12/3hi

3.数据类型*
3.1基本数据类型
3.1.1数值型
  整数类型：byte[1],short[2],int[4],long[8]  
    ①默认常量为int，long型须后加'L'      #long a = 1L
    ②常量赋值先判断范围;变量赋值考虑精度  #byte/short a = 1 √
    ②1byte(基本储存单位)=8bi(最小~)                   
  浮点类型：float[4],double[8]
    ①浮点数=符号位+指数位+尾数位         #尾数丢失造成精度损失(小数总是近似值)
    ②默认常量为double，float须后加'F'    #float a = 1.1F 
    ③十进制计数：0.512=.512；512.0
     科学计数法：5.12e2=5.12*10^2；5.12E-2=5.12/10^2
    ④浮点型计算得近似值：double a=8.1/3  //2.6999...97     
     计算结果的相等判断：if(a=b)/(Math.abs(a-b)<0.0001);
  字符型：char[2](存放单个字符）
    ①'char'表示字符型
    ②1字符=1中文=2英文，可定义转义字符(\t)
    ③本质是一个整数，可进行运算，输出unicode码对应的字符
     http://tool.chinaz.com/Tools/Unicode.aspx
     char c3= 97         System.out.println(c3)       //a
     char c2='a'         System.out.println((int)c2)  //97
     char c4='a'+1       System.out.println(c4)       //b
    ④Char的存取：显示<-'a'-十进制-二进制->储存
  布尔型：boolean[1](true/false)
3.2引用数据类型->后续
   类class：字符串"String"
   接口interfaca
   数组[]

4.编码
  ASCII[1]       ：一共有128个字符(第一位统一为0)，不能表示中文
  Unicode[2]     ：拓展ASCII(0-127的字符相同)，可表示所有语言
  utf-8[1,6]     ：改进unicode(可变大小)   #表示的中文[3]更多，转GBK可能报错
  gb2312<gbk[1/2]：可表示汉字              #big5繁体中文

5.基本数据类型转换
5.1自动类型转换规则
   ①精度小自动转为精度大，超过精度则报错(特例：数值型的常量赋值)
    转换：char-int-long-float-double/byte-short-int-long-float-double
    示例：int a='c'  //97 ; double b=80//80.0 ；byte a=1000
   ②(byte/short)与char之间不能自动转换，boolean不参与转换
   ③混合运算：转换成精度最大的再计算，结果自动提升为操作数中精度最大的类型 
    float d1=10+1.1  #错误(double->float)
    float d1=10+1.1F #正确
    byte a1=1;short a2=2;int a3=3;double a4=4.0
          float a5=a1+a2+a3+a4   #double->float报错
   ④byte,short,char可以转为int计算
    示例：byte a1=1  short a2=1  short/int a3=a1+a2  #int->short报错/int成功 
         byte a4=1  byte a5=a1+a4  #int->byte   
5.2强制类型转换规则
   ①加强制符()容量大->容量小，可能造成精度损失或数据溢出 
    int a = (int)1.9//1                  #精度损失
    int a1=1000 ; byte a2=(byte)n2//-48  #数据溢出
   ②只针对最近的操作数有效，可用小括号提升优先级
    int a=(int)10*3.5+6*1.5//doyble->int
    int a=(int)(10*3.5+6*1.5)//(int)44.0->44
   ③char可以自动保存int常量值，保存int变量值需要强制转换
    char a1=100//√ ; int a2=100//√ ; char a3=a2//× ；
    char a4=(char)a2//√ ；System.out.println(a4)//char(100)->d
5.3基本数据类型与String：必须保证格式正确(String"hi"->int异常)
   ①->:基本类型的值+""
    int a=100 ; String str1=a+""
   ②<-:调用包装类的parseXX方法
    int num1 = Integer.parseInt(a);
   ③String->char:String.chartAt(0)
    String a="123" ; char b=a.charAt(0)  #取出第一个字符
6.API文档：应用程序编程接口，用于说明类及其使用方法
6.1JDK8中文版：https://www.matools.com/api/java8、
6.2类的组织形式：JDK-->包(...)-->n接口/类(...)/异常/枚举-->字段/方法
6.3使用示例：寻找相应的包--类--方法；显示-索引-类(第一条)

三、运算符
1.算数运算符
2.关系运算符
3.逻辑运算符
4.赋值运算符
5.三无运算符
6.运算符优先级
 

提升编程能力

  